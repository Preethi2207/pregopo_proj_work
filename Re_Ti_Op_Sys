//Real Time Operating System
//-----------------------------------------------------------------------------
// Hardware Target
//-----------------------------------------------------------------------------
// Target Platform: EK-TM4C123GXL Evaluation Board
// Target uC: TM4C123GH6PM
// System Clock: 40 MHz
// Hardware configuration:
// 5 Pushbuttons and 5 LEDs, UART
//-----------------------------------------------------------------------------
// Device includes, defines, and assembler directives
//-----------------------------------------------------------------------------
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <ctype.h>
#include <stdbool.h>
#include <math.h>
#include <string.h>
#include "tm4c123gh6pm.h"
//Bitbanding references for the off-board LEDs
#define RED_LED (*((volatile uint32_t *)(0x42000000 + (0x400053FC-0x40000000)*32 + 4*4))) // offboard
red LED (PB4)
#define ORANGE_LED (*((volatile uint32_t *)(0x42000000 + (0x400043FC-0x40000000)*32 + 6*4))) //
off-board orange LED (PA6)
#define YELLOW_LED (*((volatile uint32_t *)(0x42000000 + (0x400043FC-0x40000000)*32 + 5*4))) //
off-board yellow LED (PA5)
#define GREEN_LED (*((volatile uint32_t *)(0x42000000 + (0x400043FC-0x40000000)*32 + 7*4))) //
off-board green LED (PA7)
#define BLUE_LED (*((volatile uint32_t *)(0x42000000 + (0x400253FC-0x40000000)*32 + 2*4))) // onboard
blue LED
#define PUSH_BUTTON_1 (*((volatile uint32_t *)(0x42000000 + (0x400253FC-0x40000000)*32 + 4*4)))
//on-board
#define PUSH_BUTTON_2 (*((volatile uint32_t *)(0x42000000 + (0x400053FC-0x40000000)*32 + 6*4)))
// (PB6)-Push button 4
#define PUSH_BUTTON_3 (*((volatile uint32_t *)(0x42000000 + (0x400043FC-0x40000000)*32 + 4*4)))
// (PA4)-Push button 3
#define PUSH_BUTTON_4 (*((volatile uint32_t *)(0x42000000 + (0x400043FC-0x40000000)*32 + 3*4)))
// (PA3)-Push button 2
#define PUSH_BUTTON_5 (*((volatile uint32_t *)(0x42000000 + (0x400043FC-0x40000000)*32 + 2*4)))
// (PA2)-Push button 1
#define MAX_CHARS 80 //defining the max number of characters(same as my EE5314 project)
//-----------------------------------------------------------------------------
// RTOS Defines and Kernel Variables
//-----------------------------------------------------------------------------
// function pointer
typedef void (*_fn)();
// semaphore
#define MAX_SEMAPHORES 5
#define MAX_QUEUE_SIZE 5
struct semaphore
{
uint16_t count;
uint16_t queueSize;
uint32_t processQueue[MAX_QUEUE_SIZE]; // store task index here
} semaphores[MAX_SEMAPHORES];
uint8_t semaphoreCount = 0;
struct semaphore *keyPressed, *keyReleased, *flashReq, *resource;
// task
#define STATE_INVALID 0 // no task
#define STATE_UNRUN 1 // task has never been run
#define STATE_READY 2 // has run, can resume at any time
#define STATE_BLOCKED 3 // has run, but now blocked by semaphore
#define STATE_DELAYED 4 // has run, but now awaiting timer
#define MAX_TASKS 10 // maximum number of valid tasks
uint8_t taskCurrent = 0; // index of last dispatched task
uint8_t taskCount = 0; // total number of valid tasks
uint32_t temp;
uint8_t SVC_number;
/////////////////////////////////////////////////////////////////////////////////////////////
//my global variables
uint32_t system_stack;
uint32_t wait_s;
//uint8_t m = 0;
uint8_t n = 0;
uint8_t global_priority_variable = 1; //priority ON on power up
char str_input[MAX_CHARS+1];
uint8_t field_count;
int i;
uint8_t field_position[40];
char field_type[40];
uint32_t start_counter=0;
uint32_t stop_counter=0;
uint32_t total_process_time=0;
char str1[80]={0}; //used to store the value of string before reversing
char str2[80]={0}; //used to store the value of string after reversing
uint8_t preempt =1; //preemption ON on power up
uint8_t pi=1; //priority inheritance ON on power up
uint8_t preempt_enable=0;
//////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
struct _tcb
{
uint8_t state; // see STATE_ values above
void *pid; // used to uniquely identify thread
void *sp; // location of stack pointer for thread
void *savepid; // save location of stack pointer for thread
uint8_t priority; // 0=highest, 15=lowest
uint8_t currentPriority; // used for priority inheritance
uint8_t skipcount; // introduced to use when the priority is on to obtain the task order
uint32_t ticks; // ticks until sleep complete
float CPU_time_cent; // resultant CPU_time (in 1 percent)
float CPU_time_hundredth_cent; //resultant CPU_time (in 0.01 percent)
float current_process_time; // used in the calculation of cpu time
uint32_t CPU_time_int_cent; //to display only the integer part after calculating CPU time (in 1
percent)
uint32_t CPU_time_int_hundredth_cent; //to display only the integer part after calculating CPU time
(in 0.01 percent)
char name[16]; // name of task used in ps command
uint32_t CPU_time_decimal_cent; //to display only the decimal part after calculating CPU time (in 1
percent)
uint32_t CPU_time_decimal_hundredth_cent; //to display only the decimal part after calculating CPU
time (in 0.01 percent)
void *semaphore; // pointer to the semaphore that is blocking the thread
} tcb[MAX_TASKS];
uint32_t stack[MAX_TASKS][256]; // 1024 byte stack for each thread
//-----------------------------------------------------------------------------
// RTOS Kernel Functions
//-----------------------------------------------------------------------------
void rtosInit()
{
uint8_t i;
// no tasks running
taskCount = 0;
// clear out tcb records
for (i = 0; i < MAX_TASKS; i++)
{
tcb[i].state = STATE_INVALID;
tcb[i].pid = 0;
}
// Initialize systick for 1ms system timer
NVIC_INT_CTRL_R |= 0x04000000; //Systick exception state is pending
NVIC_ST_CTRL_R |= 0x00000007; //Configure clock, enable interrupt and counter
NVIC_ST_RELOAD_R |= 39999; //((40MHZ clock/1000 ticks per second)-1)=39999
NVIC_ST_CURRENT_R |= 0; //clearing the register and count bit of STCTRL
}
void rtosStart()
{
// Code to call the first task to be run
_fn fn;
taskCurrent = rtosScheduler(); //call scheduler
system_stack=get_sp(); //Store system stack
// Add code to initialize the SP with tcb[task_current].sp
set_sp(tcb[taskCurrent].sp);
//current value initialization to stack pointer
fn=tcb[taskCurrent].pid;
preempt_enable=1; //to make pendsv enable for preemption after creating thread
(*fn)();
}
bool createThread(_fn fn, char name[], int priority)
{
__asm(" MOV R8,R0"); //moving fn value into R8 to use it in create thread function run in SVCISR
__asm(" MOV R9,R1"); //moving name value into R9 to use it in create thread function run in SVCISR
__asm(" MOV R10,R2"); //moving priority value into R10 to use it in create thread function run in
SVCISR
__asm(" SVC #7");
}
//Function to destroy a thread
// Remove any pending semaphore waiting
void destroyThread(_fn fn)
{
__asm(" MOV R7,R0");//moving fn value into R7 to use it in destroy thread function run in SVCISR
__asm(" SVC #6");
}
// Set a thread priority
void setThreadPriority(_fn fn, uint8_t priority)
{
__asm(" MOV R10,R0"); //moving fn value into R10 to use it in setthreadPriority function run in
SVCISR
__asm(" MOV R11,R1"); //moving fn value into R11 to use it in setthreadPriority function run in
SVCISR
__asm(" SVC #8");
}
struct semaphore* createSemaphore(uint8_t count)
{
struct semaphore *pSemaphore = 0;
if (semaphoreCount < MAX_SEMAPHORES)
{
pSemaphore = &semaphores[semaphoreCount++];
pSemaphore->count = count;
}
return pSemaphore;
}
// Function to yield execution back to scheduler using pendsv
void yield()
{
// push registers, call scheduler, pop registers, return to new function
__asm(" SVC #1");
}
// Function to support 1ms system timer
// execution yielded back to scheduler until time elapses using pendsv
void sleep(uint32_t tick)
{
__asm(" MOV R4,R0");//Move the value of tick into R4 for use in SVCISR task call
// push registers, set state to delayed, store timeout, call scheduler, pop registers,
// return to new function (separate unrun or ready processing)
__asm(" SVC #2");
}
// Function to wait a semaphore with priority inheritance
// return if avail (separate unrun or ready processing), else yield to scheduler using pendsv
void wait(struct semaphore *pSemaphore)
{
__asm(" MOV R5,R0");//move the pSemaphore pointer value from R0 to R5 for use in SVCISR task
call
__asm(" SVC #3");//wait without post
}
// Function to signal if semaphore is available using pendsv
void post(struct semaphore *pSemaphore)
{
__asm(" MOV R6,R0");//move the pSemaphore pointer value from R0 to R6 for use in SVCISR task
call
__asm(" SVC #4");//Post
}
//Implement prioritization to 8 levels
int rtosScheduler()
{
static uint8_t task = 0xFF;
bool ok;
ok = false;
while (!ok)
{
task++;
if (task >= MAX_TASKS)
task = 0;
if(global_priority_variable == 0) //check whether priority is enabled to decide old or new schedule
{
tcb[task].skipcount = tcb[task].currentPriority;
if(tcb[task].skipcount >= tcb[task].currentPriority)
ok = (tcb[task].state == STATE_READY || tcb[task].state == STATE_UNRUN); //original old rtos
scheduler
}
else //new scheduler scheme
{
if(tcb[task].skipcount < tcb[task].currentPriority) //check whether the task can be skipped as priority
number is equal to number of times to skip
{
tcb[task].skipcount++; //skip the current task and search for next task
}
else
{
tcb[task].skipcount = 0; //schedule the task if the skipcount becomes equal to or exceeds the
currentpriority
ok = (tcb[task].state == STATE_READY || tcb[task].state == STATE_UNRUN); //set ok to run this
task which cannot be skipped further
}
}
}
return task;
}
// Function to add support for the system timer
// In preemptive code, code to request task switch is added
void systickIsr()
{
uint8_t i=0;
while(i<=MAX_TASKS-2)
{
if(tcb[i].state == (STATE_DELAYED))
{
if(tcb[i].ticks == 0)
{
tcb[i].state=STATE_READY;
}
else
{
tcb[i].ticks--;
}
}
i++;
}
tcb[taskCurrent].current_process_time =
((0.99*stop_counter)+(0.01*tcb[taskCurrent].current_process_time));//calculate process time using IIR
digital one pole low pass filter formula yn=ay(n-1)+bxn;(tcb[taskCurrent].current_process_time is the
time accumulated)
if((preempt == 1) && (preempt_enable == 1)) //Preempt_enable is given in rtos_start()and checked
here to prevent pendsv to be enabled before creating thread
{
NVIC_INT_CTRL_R |= NVIC_INT_CTRL_PEND_SV;
}
}
// In coop and preemptive, function to support for task switching is added
// Process UNRUN and READY tasks differently
void pendSvIsr()
{
// Compiler Push R4,LR and hardware push
__asm(" PUSH{r5-r11}"); //push user list whereas hardware pusher list and c compiler pusher list are
pushed automatically
tcb[taskCurrent].sp=get_sp(); //save stack pointer for context switch
set_sp(system_stack); //restore stack pointer
TIMER1_CTL_R &= ~TIMER_CTL_TAEN; //disable the counter to stop it before reconfiguring
stop_counter = TIMER1_TAV_R; //Record the time
taskCurrent = rtosScheduler();//call the scheduler
TIMER1_TAV_R=0;//clear the counter value to start all over again
start_counter = TIMER1_TAV_R;//reset the start counter value
TIMER1_CTL_R |= TIMER_CTL_TAEN; //start the counter
//get the index of the task to be executed
set_sp(tcb[taskCurrent].sp);
if(tcb[taskCurrent].state == STATE_UNRUN)
{
stack[taskCurrent][252]=0x01000000;//XPSR //I have taken from 252 since 255,254 and 253
took garbage values
stack[taskCurrent][251]=(tcb[taskCurrent].pid);//*pc
stack[taskCurrent][250]=0xFFFFFFF9;//LR
stack[taskCurrent][249]=0x00000001;//R3
stack[taskCurrent][248]=0x00000000;//R2
stack[taskCurrent][247]=0x00000011;//R1
stack[taskCurrent][246]=0x00000010;//R0
stack[taskCurrent][245]=0x00000009;//R12
stack[taskCurrent][244]=0xFFFFFFF9;//PC
stack[taskCurrent][243]=0xFFFFFFF9;//R4
stack[taskCurrent][242]=0xFFFFFFF9;//R11
stack[taskCurrent][241]=0xFFFFFFF9;//R10
stack[taskCurrent][240]=0x00000002;//R9
stack[taskCurrent][239]=0x00000011;//R8
stack[taskCurrent][238]=0x00000010;//R7
stack[taskCurrent][237]=0x00000009;//R6
stack[taskCurrent][236]=0x00000008;//R5
tcb[taskCurrent].sp = &stack[taskCurrent][236];//point to the base of the stack
set_sp(tcb[taskCurrent].sp);
tcb[taskCurrent].state=STATE_READY;
}
if((tcb[taskCurrent].state==STATE_READY))
{
__asm(" POP{r5-r11}"); //User pop list
}//compiler list and hardware pop list
}
// Function to add support for the service call
// In preemptive code, code to handle synchronization primitives is added
void svCallIsr()
{
SVC_number=getSVC_number();//get the number to run functions accordingly
SVC_number=SVC_number&0x000000FF;//get only lower two bytes for switch case statements
struct semaphore *s;
_fn fn;
char *name;
int priority;
switch(SVC_number)
{
case 1: //yield
{
NVIC_INT_CTRL_R |= NVIC_INT_CTRL_PEND_SV;
break;
}
case 2: //sleep with flash 4 hz
{
tcb[taskCurrent].ticks = get_sleep_ms();
tcb[taskCurrent].state = STATE_DELAYED;
NVIC_INT_CTRL_R |= NVIC_INT_CTRL_PEND_SV;
break;
}
case 3: //wait without post
{
s=get_wait_s();
if((s->count)==0)
{
s->processQueue[s->queueSize]=tcb[taskCurrent].pid;
s->queueSize++;
tcb[taskCurrent].state=STATE_BLOCKED;
tcb[taskCurrent].semaphore = s;//store the location of current semaphore waiting in the queue
if(pi) //priority inheritance check
{
uint8_t m=0;
while(m<=MAX_TASKS-2)
{
if(tcb[m].semaphore==s)
{
if(tcb[m].state==STATE_BLOCKED)
{
if(tcb[taskCurrent].currentPriority < tcb[m].currentPriority) //check if the task with high
priority is blocked by the task with low priority
{
tcb[taskCurrent].currentPriority = tcb[m].currentPriority; //Elevate current task
priority so that it executes fast to release the lock
}
}
}
m++;
}
}
NVIC_INT_CTRL_R |= NVIC_INT_CTRL_PEND_SV;
}
else
{
(s->count)--;
}
break;
}
case 4: //post
{
s=get_post_s();
(s->count)++;
uint8_t m=0;
if((s->queueSize)>0) //check whether wait is in the queue
{
while(m<=MAX_TASKS-2)
{
if((tcb[m].pid) == (s->processQueue[0])) //check the process in the queue with current pid
{
tcb[m].state=STATE_READY;//mark next in queue state as ready
s->queueSize--; //remove from queue
s->count--; //decrement count
}
m++;
}
m=0;
while(m<=MAX_QUEUE_SIZE-2)
{
s->processQueue[m]=s->processQueue[m+1];
m++;
}
}
if(pi) //if priority inheritance is ON
{
tcb[taskCurrent].currentPriority = tcb[taskCurrent].priority; //set the priority back to the original
one since it was elevated when an unimportant tasks blocked the low important task
}
NVIC_INT_CTRL_R |= NVIC_INT_CTRL_PEND_SV;
break;
}
case 5: //CPU time
{
total_process_time =0;
int i=0;
//calculate total time taken for all the tasks
while(i<=MAX_TASKS-2)
{
total_process_time = (total_process_time + tcb[i].current_process_time); //total CPU time for all
the tasks
i++;
}
i=0;
//display CPU time in 1%
while(i<=MAX_TASKS-2)
{
tcb[i].CPU_time_cent = (((tcb[i].current_process_time)/(total_process_time))*100); //finding CPU
time for each task and displaying it in one percent
tcb[i].CPU_time_int_cent = (tcb[i].CPU_time_cent);//integer part alone of the CPU time(for 1%
display)
tcb[i].CPU_time_decimal_cent =(((tcb[i].CPU_time_cent)-(tcb[i].CPU_time_int_cent))*100);
//decimal part of CPU time rounded to 10^2(for 1% display)
i++;
}
i=0;
//display CPU time in 0.01%
while(i<=MAX_TASKS-2)
{
tcb[i].CPU_time_hundredth_cent = (((tcb[i].current_process_time)/(total_process_time))*10000);
//finding CPU time for each task and displaying it in 0.01 percent
tcb[i].CPU_time_int_hundredth_cent = (tcb[i].CPU_time_hundredth_cent);//integer part alone of
the CPU time
tcb[i].CPU_time_decimal_hundredth_cent =(((tcb[i].CPU_time_hundredth_cent)-
(tcb[i].CPU_time_int_hundredth_cent))*10000); //decimal part of CPU time rounded to 10^4(for 0.01%
display)
i++;
}
i=0;
putsUart0("----------------------------- CPU PROCESS OF ALL TASKS:----------------------------");
putsUart0(" FORMAT-----> S_NO: (CPU_PROCESS_TIME_FOR_THE_PARTICULAR_TASK);");
putsUart0("\t***************************DISPLAY CPU_TIME IN
1%*********************************");
while(i<=MAX_TASKS-2)
{
putsUart0(" ");
putsUart0(itoa(i)); //display task number
putsUart0(": (");
putsUart0(itoa(tcb[i].CPU_time_int_cent));//display the integer part of my tasks CPU_time(in 1%)
putsUart0(".");
putsUart0(itoa(tcb[i].CPU_time_decimal_cent));//display the decimal part of my tasks
CPU_time(in 1%)
putsUart0(");");
i++;
}
putsUart0("\t**************************** DISPLAY CPU_TIME IN
0.01%*******************************");
i=0;
while(i<=MAX_TASKS-2)
{
putsUart0(" ");
putsUart0(itoa(i)); //display task number
putsUart0(": (");
putsUart0(itoa(tcb[i].CPU_time_int_hundredth_cent));//display the integer part of my tasks
CPU_time(in 0.01%)
putsUart0(".");
putsUart0(itoa(tcb[i].CPU_time_decimal_hundredth_cent));//display the decimal part of my
tasks CPU_time(in 0.01%)
putsUart0(");");
i++;
}
break;
}
case 6: //delete or destroy thread
{
s=get_delete_thread_values_s();
uint8_t m=0;
uint8_t n=0;
while(m<=MAX_TASKS-2) //save the pid values before doing delete operation
{
tcb[m].savepid=tcb[m].pid;
m++;
}
m=0;
while(m<=MAX_TASKS-2)
{
if(s==tcb[m].pid)//check whether the entered thread pid and current task pid are same to
perform delete thread operation
{
tcb[m].state=STATE_INVALID; //Mark the state as invalid to delete it
s=tcb[m].semaphore; //call the semaphore locator
taskCount--;//decrement task count since we are going to perform delete operation and we
have to create this thread again using createthread function
while(n<=MAX_TASKS-2) //check for all the tasks
{
if(s->processQueue[n]==tcb[m].pid) //check whether the current task pid is equal to the
semaphore id in the queue to perform delete operation
{
s->processQueue[n]=s->processQueue[n+1];
s->queueSize--; //remove from the queue
}
n++;
}
tcb[m].pid=0;//Take the current deleted process pid to be zero
tcb[m].semaphore = 0;//Take the current task semaphore to be zero
//Reset the time variables used in calculating and displaying CPU time for this task to zero
since the task is deleted
tcb[m].current_process_time=0;
tcb[m].CPU_time_cent=0;
tcb[m].CPU_time_hundredth_cent = 0;
tcb[m].CPU_time_int_cent=0;
tcb[m].CPU_time_int_hundredth_cent = 0;
tcb[m].CPU_time_decimal_cent=0;
tcb[m].CPU_time_decimal_hundredth_cent = 0;
}
m++;
}
break;
}
case 7: //create thread
{
fn=get_create_thread_values_fn();
name=get_create_thread_values_name();
priority=get_create_thread_values_priority();
bool ok = false;
uint8_t i = 0;
bool found = false;
// REQUIRED: store the thread name
// add task if room in task list
if (taskCount < MAX_TASKS)
{
// make sure fn not already in list (prevent reentrancy)
while (!found && (i < MAX_TASKS))
{
found = (tcb[i++].pid == fn);
}
if (!found)
{
// find first available tcb record
i = 0;
int q=0;
while (tcb[i].state != STATE_INVALID) {i++;}
tcb[i].state = STATE_UNRUN;
tcb[i].pid = fn;
tcb[i].sp = &stack[i][255]; //call the base of the stack pointer
tcb[i].priority = priority;
tcb[i].currentPriority = priority; //assigning priority
tcb[i].skipcount=0; //initializing skipcount as zero
while(q<strlen(name))//storing names of each tasks to use later in shell(creating name directory for
the tasks)
{
tcb[i].name[q]=toupper(name[q]);
q++;
}
// increment task count
taskCount++;
ok = true;
}
}
// REQUIRED: allow tasks switches again
return ok;
break;
}
case 8: //set thread priority
{
fn = get_set_thread_priority_values_fn();
priority = get_set_thread_priority_values_priority();
uint8_t m=0;
while(m<=MAX_TASKS-2)
{
if(fn==tcb[m].pid)
{
tcb[m].priority = priority; //set the current thread priority to given priority
tcb[m].currentPriority=tcb[m].priority;
}
if((tcb[m].currentPriority == priority)&&(fn==tcb[m].pid)&&(global_priority_variable == 1))
{
tcb[m].skipcount=0; //clear the skip count to start with new priority if setThreadPriority is
enabled by the user in the middle of the process and global Priority bit is on
}
m++;
}
break;
}
}
}
//-----------------------------------------------------------------------------
// Subroutines
//-----------------------------------------------------------------------------
// Initialize Hardware
void initHw()
{
// Initialization for blue, orange, red, green, and yellow LEDs
// 5 pushbuttons, and uart
// Configure HW with 16 MHz XTAL, PLL enabled, system clock of 40 MHz
SYSCTL_RCC_R = SYSCTL_RCC_XTAL_16MHZ | SYSCTL_RCC_OSCSRC_MAIN | SYSCTL_RCC_USESYSDIV |
(4 << SYSCTL_RCC_SYSDIV_S);
// Set GPIO ports to use APB (not needed since default configuration -- for clarity)
//UART on port A must use APB
SYSCTL_GPIOHBCTL_R = 0;
// Enable GPIO port A,B and F peripherals
SYSCTL_RCGC2_R = SYSCTL_RCGC2_GPIOA | SYSCTL_RCGC2_GPIOB | SYSCTL_RCGC2_GPIOF;
//Configure LED and push buttons on Hardware
//Port A configuration
GPIO_PORTA_DIR_R = 0xE0; // bits 5-7 are outputs for leds,( PA5, PA6 and PA7) others are inputs
GPIO_PORTA_DR2R_R = 0xE0; // set drive strength to 2mA (not needed since default configuration --
for clarity)
GPIO_PORTA_DEN_R = 0xFC; // enable LEDs and pushbuttons
GPIO_PORTA_PUR_R = 0x1C; //enable pull up resistor for push button
//Port B configuration
GPIO_PORTB_DIR_R = 0x10; // bits 5-7 are outputs, other pins are inputs, here we use only PB4
GPIO_PORTB_DR2R_R = 0x10; // set drive strength to 2mA (not needed since default configuration --
for clarity)
GPIO_PORTB_DEN_R = 0x50; // enable LEDs and pushbuttons
GPIO_PORTB_PUR_R = 0X40; //enable pull up resistor for push button
// Configure LED and pushbutton pins on board
GPIO_PORTF_DIR_R = 0x04; // bits 2 are outputs, other pins are inputs
GPIO_PORTF_DR2R_R = 0x04; // set drive strength to 2mA (not needed since default configuration -- for
clarity)
GPIO_PORTF_DEN_R = 0x14; // enable LEDs and pushbuttons
GPIO_PORTF_PUR_R = 0x10; // enable internal pull-up for push button
// Configure UART0 pins
SYSCTL_RCGCUART_R |= SYSCTL_RCGCUART_R0; // turn-on UART0, leave other uarts in same
status
GPIO_PORTA_DEN_R |= 3; // default, added for clarity
GPIO_PORTA_AFSEL_R |= 3; // default, added for clarity
GPIO_PORTA_PCTL_R = GPIO_PCTL_PA1_U0TX | GPIO_PCTL_PA0_U0RX;
// Configure UART0 to 115200 baud, 8N1 format (must be 3 clocks from clock enable and config writes)
(used the same UART as my EE5314 project)
UART0_CTL_R = 0; // turn-off UART0 to allow safe programming
UART0_CC_R = UART_CC_CS_SYSCLK; // use system clock (40 MHz)
UART0_IBRD_R = 21; // r = 40 MHz / (Nx115.2kHz), set floor(r)=21, where N=16
UART0_FBRD_R = 45; // round(fract(r)*64)=45
UART0_LCRH_R = UART_LCRH_WLEN_8 | UART_LCRH_FEN; // configure for 8N1 w/ 16-level FIFO
UART0_CTL_R = UART_CTL_TXE | UART_CTL_RXE | UART_CTL_UARTEN; // enable TX, RX, and module
// Configure Timer 1 as the time base (used the same timer as my EE5314 project)
SYSCTL_RCGCTIMER_R |= SYSCTL_RCGCTIMER_R1; // turn-on timer
TIMER1_CTL_R &= ~TIMER_CTL_TAEN; // turn-off timer before reconfiguring
TIMER1_CFG_R = TIMER_CFG_32_BIT_TIMER; // configure as 32-bit timer (A+B)
TIMER1_TAMR_R = TIMER_TAMR_TAMR_PERIOD; // configure for periodic mode (count down)
TIMER1_TAILR_R = 0x190; // set load value to 40e6 for 100 kHz interrupt rate
TIMER1_IMR_R = TIMER_IMR_TATOIM; // turn-on interrupts
NVIC_EN0_R |= 1 << (INT_TIMER1A - 16); // turn-on interrupt 37 (TIMER1A)
}
// Approximate busy waiting (in units of microseconds), given a 40 MHz system clock
void waitMicrosecond(uint32_t us)
{
// Approx clocks per us
__asm("WMS_LOOP0: MOV R1, #6"); // 1
__asm("WMS_LOOP1: SUB R1, #1"); // 6
__asm(" CBZ R1, WMS_DONE1"); // 5+1*3
__asm(" NOP"); // 5
__asm(" B WMS_LOOP1"); // 5*3
__asm("WMS_DONE1: SUB R0, #1"); // 1
__asm(" CBZ R0, WMS_DONE0"); // 1
__asm(" B WMS_LOOP0"); // 1*3
__asm("WMS_DONE0:"); // ---
// 40 clocks/us + error
}
// Code to return a value from 0-31 indicating which of 5 PBs are pressed
uint8_t readPbs()
{
if(PUSH_BUTTON_1!=1)
{
return 1;
}
if(PUSH_BUTTON_2!=1)
{
return 2;
}
if(PUSH_BUTTON_3!=1)
{
return 4;
}
if(PUSH_BUTTON_4!=1)
{
return 8;
}
if(PUSH_BUTTON_5!=1)
{
return 16;
}
return 0;
}
// ------------------------------------------------------------------------------
// Task functions
// ------------------------------------------------------------------------------
// one task must be ready at all times or the scheduler will fail
// the idle task is implemented for this purpose
void idle()
{
while(true)
{
ORANGE_LED = 1;
waitMicrosecond(1000);
ORANGE_LED = 0;
yield();
}
}
void idle2()
{
while(true)
{
YELLOW_LED = 1;
waitMicrosecond(1000);
YELLOW_LED =0;
yield();
}
}
void flash4Hz()
{
while(true)
{
GREEN_LED ^= 1;
sleep(125);
}
}
void oneshot()
{
while(true)
{
wait(flashReq);
YELLOW_LED = 1;
sleep(1000);
YELLOW_LED = 0;
}
}
void partOfLengthyFn()
{
// represent some lengthy operation
waitMicrosecond(1000);
// give another process a chance to run
yield();
}
void lengthyFn()
{
uint16_t i;
while(true)
{
wait(resource);
for (i = 0; i < 4000; i++)
{
partOfLengthyFn();
}
RED_LED ^= 1;
post(resource);
}
}
void readKeys()
{
uint8_t buttons;
while(true)
{
wait(keyReleased);
buttons = 0;
while (buttons == 0)
{
buttons = readPbs();
yield();
}
post(keyPressed);
if ((buttons & 1) != 0)
{
YELLOW_LED ^= 1;
RED_LED = 1;
}
if ((buttons & 2) != 0)
{
post(flashReq);
RED_LED = 0;
}
if ((buttons & 4) != 0)
{
createThread(flash4Hz, "flash4Hz", 0);
}
if ((buttons & 8) != 0)
{
destroyThread(flash4Hz);
}
if ((buttons & 16) != 0)
{
setThreadPriority(lengthyFn, 4);
}
yield();
}
}
void debounce()
{
uint8_t count;
while(true)
{
wait(keyPressed);
count = 10;
while (count != 0)
{
sleep(10);
if (readPbs() == 0)
count--;
else
count = 10;
}
post(keyReleased);
}
}
void uncooperative()
{
while(true)
{
while (readPbs() == 8)
{
}
yield();
}
}
void important()
{
while(true)
{
wait(resource);
BLUE_LED = 1;
sleep(1000);
BLUE_LED = 0;
post(resource);
}
}
void shell()
{
while (true)
{
// Processing for shell commands through UART is added
char c;
int count=0;
int l;
char *s;
char *thread_name;
y: c=getcUart0();
if(c==8)//backspace
{
if(count>0)
{
count--;
goto y;
}
else goto y;
}
else
{
if(c==13)//carriage return
{
if(count==0)
{
strcpy(str_input,"No command entered");
putsUart0(str_input);
putsUart0("\r\n");
goto n;
}
else
{
str_input[count]=0;
goto n;
}
}
else
{
if(c>=32)//space
{
str_input[count++]=c;
if(count>MAX_CHARS+1)
{
str_input[count]=0;
goto n;
}
else goto y;
}
else goto y;
}
}
n:;
// converting lower to upper case
for(l=0;l<str_input[l]!='\0';l++)
{
if(str_input[l]>=97 && str_input[l]<=122)
str_input[l]=str_input[l]-32;
}
int i,j=0,k=0;
char type[40];
int position[40];
field_count=0;
for(i=0;i<40;i++)
field_type[i]=0;
//tokenizing string begins
for(i=0;str_input[i]!='\0';i++)
{
if(str_input[i]>=48 && str_input[i]<=57 || str_input[i]==45 || str_input[i]==46 ||
str_input[i]==38)
{
position[j]=i;
type[j]='n';
goto x;
}
else if(str_input[i]>=65 && str_input[i]<=90)
{
position[j]=i;
type[j]='a';
goto x;
}
else goto z;
x: if(j==0)
{
field_position[k]=position[j];
field_type[k]=type[j];
field_count++;
k++;
}
else if ((position[j]-position[j-1])!=1)
{
field_position[k]=position[j];
field_type[k]=type[j];
field_count++;
k++;
}
j++;
z:;
}
// Convert all delimiters to nulls
for(i=0;str_input[i]!='\0';i++)
{
if(!((str_input[i]>=65 && str_input[i]<=90) || (str_input[i]>=48 && str_input[i]<=57) ||
str_input[i]==45 || str_input[i]==46 || str_input[i]==38))
str_input[i]='\0';
}
// display the command entered
for(i=0; i<field_count; i++)
{
putsUart0(&str_input[field_position[i]]);
putsUart0("\n\r\n");
}
if(iscommand("setpriority",1))//set priority variable to decide new or old RTOS schedule
{
if(getstring(1))
{
s=getnumber(1);
if(strcomp(s,"1")==0)
{
global_priority_variable = 1; //enable new RTOS scheduler
}
else if(strcomp(s, "0")==0)
{
global_priority_variable = 0; //disable new RTOS scheduler
}
}
}
else if(iscommand("pidof",1)) //display pid id of the threads using 'pidof' (linux command)
{
thread_name = getnumber(1);
char* pid_id;
int t=0;
while(t<=MAX_TASKS-2)
{
if(strcomp(thread_name,tcb[t].name)==0)
{
putsUart0("\n\r PID ID OF GIVEN THREAD IS: ");
pid_id=itoa((tcb[t].pid)); //display pid id of given thread
putsUart0(pid_id);
}
t++;
}
}
else if(iscommand("ipcs",0)) //display semaphores list, queue size, pid id and semaphore count using
ipcs(linux command)
{
int i=0;
char* Semaphores[30];
Semaphores[0]="keyPressed";
Semaphores[1]="keyReleased";
Semaphores[2]="Flashreq";
Semaphores[3]="resource";
putsUart0("\n1.SEMAPHORE LIST");
while(i<=(MAX_SEMAPHORES-2))
{
putsUart0("\t");
putsUart0(Semaphores[i]);
i++;
}
i=0;
putsUart0("2.QUEUE SIZE");
while(i<=(MAX_SEMAPHORES-2))
{
putsUart0("\t\t");
putsUart0(itoa(semaphores[i].queueSize));
i++;
}
i=0;
putsUart0("\t3.PID ID OF WAITING TASKS IN THE QUEUE");
while(i<=MAX_SEMAPHORES-2)
{
putsUart0(" ");
putsUart0(itoa(semaphores[i].processQueue[0]));
i++;
}
i=0;
putsUart0("\t4.SEMAPHORE COUNT");
while(i<=MAX_SEMAPHORES-2)
{
putsUart0(" ");
putsUart0(itoa(semaphores[i].count));
i++;
}
putsUart0("\t5.TOTAL NUMBER OF SEMAPHORES");
putsUart0(itoa(semaphoreCount));
}
else if(iscommand("ps",0)) //display pid id, thread name, process status and CPU time of all the tasks
using 'ps'(linux command)
{
i=0;
putsUart0("PID ID, THREAD NAME AND STATUS OF ALL THE TASKS ");
putsUart0(" Format: (PID ID, THREAD NAME, STATE STATUS); ");
while(i<=MAX_TASKS-2)
{
putsUart0("(");
putsUart0(itoa(tcb[i].pid));
putsUart0(", ");
putsUart0(tcb[i].name);
putsUart0(", ");
if(tcb[i].state == 0)
putsUart0("STATE INVALID STATUS); ");
else if(tcb[i].state == 1)
putsUart0("STATE UNRUN STATUS); ");
else if(tcb[i].state == 2)
putsUart0("STATE READY STATUS); ");
else if(tcb[i].state == 3)
putsUart0("STATE BLOCKED STATUS); ");
else if(tcb[i].state == 4)
putsUart0("STATE DELAYED STATUS); ");
i++;
}
__asm(" SVC #5"); //go to SVCISR to display CPU time for all the tasks
}
else if(iscommand("kill",1)) //deleting the thread by giving pid number using 'kill'(linux command)
{
uint32_t thread_id;
i=0;
thread_id = atoi(getnumber(1));
while(i<=MAX_TASKS-2)
{
if(strcomp(thread_id,tcb[i].pid)==0)
{
destroyThread((_fn) tcb[i].pid); //perform delete operation of the task whose pid number
matches the pid number given by the user
goto cc;
}
if(i==MAX_TASKS-2)
{
goto cd; //step out to the end of the function when user given pid doesn't match with the pid of
any of the task
}
i++;
}
cc: putsUart0(" DESTROYED ");
putsUart0(tcb[i].name);
putsUart0(" SUCCESSFULLY");
cd:
}
else if(strcomp(getnumber(1),"&")==0) //creating deleted thread again by giving '&' followed by the
thread name which user wishes to create
{
i=0;
while(i<=MAX_TASKS-2)
{
if((strcomp((getnumber(0)),tcb[i].name)==0)&&(strcomp((getnumber(1)),"&")==0))
{
if(tcb[i].pid == 0)
{
createThread(tcb[i].savepid,tcb[i].name,tcb[i].priority);
putsUart0(tcb[i].name);
putsUart0(" IS CREATED SUCCESSFULLY");
}
else
{
putsUart0("THREAD PRESENT ALREADY"); //to allow only one instance of the thread with the
given valid thread name
goto gp;
}
}
i++;
}
gp:
}
else if(iscommand("reboot", 0))//restart the process all over again from beginning(retrieved from my
EE5314 project)
{
__asm(" .global _c_int00\n"
" b.w _c_int00");
}
else if(iscommand("setpreempt",1)) //set preemption to be ON or OFF (ON by default)
{
if(strcomp(getnumber(1),"ON")==0)
{
preempt = 1;
}
else if(strcomp(getnumber(1),"OFF")==0)
{
preempt = 0;
}
}
else if(iscommand("setpi",1)) //set priority inheritance ON or OFF
{
if(strcomp(getnumber(1),"ON")==0)
{
pi = 1;
}
else if(strcomp(getnumber(1),"OFF")==0)
{
pi = 0;
}
}
else
{
putsUart0("\t INVALID COMMAND ENTERED"); //displayed when none of the useful commands are
entered
}
}
}
--------------------------------------------------------------------------------------------------------
//start of functions used to get values passed into the functions run in SVCISR
---------------------------------------------------------------------------------------------------------
uint32_t get_sp()
{
__asm(" MOV R0,SP");//move stack pointer value in R0
}
uint32_t set_sp(uint32_t value_r0)
{
__asm(" ADD SP,#8 ");//Add Stack pointer value by 8
__asm(" MOV SP,R0");//Move current value to stack pointer
__asm(" SUB SP,#8 ");//Subtract Stack pointer value by 8
}
uint8_t getSVC_number()
{
__asm(" LDR R0,[R13,#0X40]");//(SP+address) where PC(will be SVC number PC +2 )of SVC number is
stored
__asm(" LDRB R0,[R0,#-0X02]");//subtract PC value by 2 to get the actual PC value of my SVC number
}
uint32_t get_sleep_ms()
{
__asm(" MOV R0,R4");//pushing the value of tick into R0
}
uint32_t get_wait_s()
{
__asm(" MOV R0,R5");//Pushing the semaphore pointer value of wait into R0
}
uint32_t get_post_s()
{
__asm(" MOV R0,R6");//pushing the semaphore pointer value of post into R0
}
void Timer1Isr()
{
TIMER1_ICR_R = TIMER_ICR_TATOCINT; // clear interrupt flag
}
uint32_t get_delete_thread_values_s()
{
__asm(" MOV R0,R7"); //pushing the delete thread fn into R0
}
uint32_t get_create_thread_values_fn()
{
__asm(" MOV R0,R8"); //pushing the create thread fn(pid no) into R0
}
uint32_t get_create_thread_values_name()
{
__asm(" MOV R0,R9"); //pushing the create thread name into R0
}
uint32_t get_create_thread_values_priority()
{
__asm(" MOV R0,R10"); //pushing the create thread priority value into R0
}
uint32_t get_set_thread_priority_values_fn()
{
__asm(" MOV R0,R10"); //pushing set thread priority fn value into R0
}
uint32_t get_set_thread_priority_values_priority()
{
__asm(" MOV R0,R11"); //pushing set thread priority priority value into R0
}
///End of functions used to get values passed into the functions in SVCISR
///////////////////////////////////////////////////////////////////////////////
// Blocking function that writes a serial character when the UART buffer is not full
void putcUart0(char c)
{
while (UART0_FR_R & UART_FR_TXFF);
UART0_DR_R = c;
}
// Blocking function that writes a string when the UART buffer is not full
void putsUart0(char* str)
{
int i;
for (i = 0; i < strlen(str); i++)
putcUart0(str[i]);
}
// Blocking function that returns with serial data once the buffer is not empty
char getcUart0()
{
while (UART0_FR_R & UART_FR_RXFE)
{
yield();
}
return UART0_DR_R & 0xFF;
}
//To check whether the command entered is useful in shell command or not
bool iscommand(char *signal_type, uint8_t min_args2)
{
if(strcomp((&str_input[field_position[0]]),signal_type)==0 && field_count-1==min_args2)
return true;
else
return false;
}
//Used as one of the function to check whether the command entered by the user is useful in shell
command or not
bool getstring(uint8_t field_number)
{
int temp=0;
int i;
char temp_copy[10];
strcpy(temp_copy,&str_input[field_position[field_number]]);
if((field_number==1)||(field_number==2) || (field_number==3))
{
for (i=0;i<strlen(temp_copy);i++)
{
if(temp_copy[i]>=48 && temp_copy[i]<=57)
{
temp+=1;
}
}
if(strlen(temp_copy)==temp)
{
return true;
}
else
return false;
}
else
return false;
}
//One of the function used in shell command to extract the input given by the user
char *getnumber(int field_number)
{
char temp_copy1[10];
int st=0;
if((field_number==0)||(field_number==1)||(field_number==2))
{
strcpy(temp_copy1,&str_input[field_position[1]]);
for (i=0;i<strlen(temp_copy1);i++)
{
if(temp_copy1[i]==45)
{
st+=1;
}
}
if(st!=0)
{
return "NEGATIVE NUMBER";
}
else
return &str_input[field_position[field_number]];
}
}
int strcomp (const char *name1, const char *name2)
{
unsigned char *str1 = (unsigned char *) name1;
unsigned char *str2 = (unsigned char *) name2;
unsigned char char1, char2;
do
{
char1 = (unsigned char) tolower((int)*str1++);
char2 = (unsigned char) tolower((int)*str2++);
if (char1 == '\0')
{
return char1 - char2;
}
}
while (char1 == char2);
return char1 - char2;
}
//Function to convert from integer to string(itoa)
int itoa(uint32_t number)
{
uint8_t i=0,j=0, r=0, len = 0,end=0;
if(number==0)
{
str2[i++]='0';
str2[i]='\0';
goto done;
}
while(number!='\0')
{
r=number%10;
str1[i++]=(r> 9) ? (r-10)+'a':r+'0';
number=number/10;
}
str1[i]='\0';
len=strlen(str1);
end=len-1;
//reversing the string starts to get the original output
for(j=0;j<strlen(str1);j++)
{
str2[j]=str1[end];
end--;
}
str2[j]='\0';
done: return str2;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////
//-----------------------------------------------------------------------------
// Main
//-----------------------------------------------------------------------------
int main(void)
{
bool ok;
// Initialize hardware
initHw();
rtosInit();
// Power-up flash
GREEN_LED = 1;
waitMicrosecond(250000);
GREEN_LED = 0;
waitMicrosecond(250000);
// Initialize semaphores
keyPressed = createSemaphore(1);
keyReleased = createSemaphore(0);
flashReq = createSemaphore(5);
resource = createSemaphore(1);
// Required idle process
ok = createThread(idle, "Idle", 15);
// ok &= createThread(idle2, "Idle2", 15);
//Other processes
ok &= createThread(lengthyFn, "LengthyFn", 12);
ok &= createThread(flash4Hz, "Flash4Hz", 4);
ok &= createThread(oneshot, "OneShot", 4);
ok &= createThread(readKeys, "ReadKeys", 12);
ok &= createThread(debounce, "Debounce", 12);
ok &= createThread(important, "Important", 0);
ok &= createThread(uncooperative, "Uncoop", 10);
ok &= createThread(shell, "Shell", 8);
// Start up RTOS
if (ok)
rtosStart(); // never returns
else
RED_LED = 1;
return 0;
}
