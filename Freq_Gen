LOW FREQUENCY GENERATOR
//-----------------------------------------------------------------------------
// Hardware Target
//-----------------------------------------------------------------------------
// Target Platform: EK-TM4C123GXL Evaluation Board
// Target uC: TM4C123GH6PM
// System Clock: 40 MHz
// Hardware configuration:
// Red LED:
// PF1 drives an NPN transistor that powers the red LED
// Green LED:
// PF3 drives an NPN transistor that powers the green LED
// Pushbutton:
// SW1 pulls pin PF4 low (internal pull-up is used)
// UART Interface:
// U0TX (PA1) and U0RX (PA0) are connected to the 2nd controller
// The USB on the 2nd controller enumerates to an ICDI interface and a virtual COM port
// Configured to 115,200 baud, 8N1
//-----------------------------------------------------------------------------
// Device includes, defines, and assembler directives
//-----------------------------------------------------------------------------
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include <ctype.h>
#include <math.h>
#include "tm4c123gh6pm.h"
#define GREEN_LED (*((volatile uint32_t *)(0x42000000 + (0x400253FC-0x40000000)*32 + 3*4)))
#define PUSH_BUTTON (*((volatile uint32_t *)(0x42000000 + (0x400253FC-0x40000000)*32 + 4*4)))
#define MAX_CHARS 80
char str_input[MAX_CHARS+1];
uint8_t field_count;
int i;
float vp;
uint8_t field_position[20];
uint32_t out_dc=0;
char field_type[20];
char *frequency;
char *amplitude;
char *offset;
char *frequency1;
char *frequency2;
uint32_t f1=0;
uint32_t f2=0;
uint32_t phase=0;
int index=0;
uint32_t delta_phase;
uint32_t DAC=0;
uint32_t LUT[4096];
uint32_t st;
float l;
int mode;
int k;
uint8_t step=0;
char string[10];
uint16_t sweep_frequency=0;
char temp3[10];
float gain1;
float offset1;
int gaindb=0;
char gain[10];
char frequencyhz[10];
float o;
uint16_t raw=0;
uint16_t raw1=0;
float volt2=0;
float volt=0;
char temp4[10];
float am=0;
uint32_t ap=0;
float w=0;
float yp=0;
int load=0;
int load1=0;
int z;
float volt_1=0;
float volt_2=0;
float volt_3=0;
//-----------------------------------------------------------------------------
// Subroutines
//-----------------------------------------------------------------------------
void Timer1ISR()
{
if(mode==0)
{
SSI2_DR_R=out_dc;
}
else
{
phase=phase+delta_phase;
index=phase>>20;
DAC=LUT[index];
SSI2_DR_R= DAC;
}
TIMER1_ICR_R = TIMER_ICR_TATOCINT; // clear interrupt flag
}
// Blocking function that returns only when SW1 is pressed
void waitPbPress()
{
while(PUSH_BUTTON);
}
// Initialize Hardware
void initHw()
{
// Configure HW to work with 16 MHz XTAL, PLL enabled, system clock of 40 MHz
SYSCTL_RCC_R = SYSCTL_RCC_XTAL_16MHZ | SYSCTL_RCC_OSCSRC_MAIN | SYSCTL_RCC_USESYSDIV
| (4 << SYSCTL_RCC_SYSDIV_S);
// Set GPIO ports to use APB (not needed since default configuration -- for clarity)
// Note UART on port A must use APB
SYSCTL_GPIOHBCTL_R = 0;
// Enable GPIO port A, B and F peripherals
SYSCTL_RCGC2_R = SYSCTL_RCGC2_GPIOA | SYSCTL_RCGC2_GPIOF |SYSCTL_RCGC2_GPIOB |
SYSCTL_RCGC2_GPIOE;
// Configure LED and pushbutton pins
GPIO_PORTF_DIR_R = 0x0A; // bits 1 and 3 are outputs, other pins are inputs
GPIO_PORTF_DR2R_R = 0x0A; // set drive strength to 2mA (not needed since default configuration --
for clarity)
GPIO_PORTF_DEN_R = 0x1A; // enable LEDs and pushbuttons
GPIO_PORTF_PUR_R = 0x10; // enable internal pull-up for push button
// Configure UART0 pins
SYSCTL_RCGCUART_R |= SYSCTL_RCGCUART_R0; // turn-on UART0, leave other uarts in same
status
GPIO_PORTA_DEN_R |= 3; // default, added for clarity
GPIO_PORTA_AFSEL_R |= 3; // default, added for clarity
GPIO_PORTA_PCTL_R = GPIO_PCTL_PA1_U0TX | GPIO_PCTL_PA0_U0RX;
// Configure UART0 to 115200 baud, 8N1 format (must be 3 clocks from clock enable and config
writes)
UART0_CTL_R = 0; // turn-off UART0 to allow safe programming
UART0_CC_R = UART_CC_CS_SYSCLK; // use system clock (40 MHz)
UART0_IBRD_R = 21; // r = 40 MHz / (Nx115.2kHz), set floor(r)=21, where N=16
UART0_FBRD_R = 45; // round(fract(r)*64)=45
UART0_LCRH_R = UART_LCRH_WLEN_8 | UART_LCRH_FEN; // configure for 8N1 w/ 16-level FIFO
UART0_CTL_R = UART_CTL_TXE | UART_CTL_RXE | UART_CTL_UARTEN; // enable TX, RX, and module
// Configure SSI2 pins for SPI configuration
SYSCTL_RCGCSSI_R |= SYSCTL_RCGCSSI_R2; // turn-on SSI2 clocking
GPIO_PORTB_DIR_R |= 0xB0; // make bits 4 and 7 outputs
GPIO_PORTB_DR2R_R |= 0xB0; // set drive strength to 2mA
GPIO_PORTB_AFSEL_R |= 0xB0; // select alternative functions for MOSI, SCLK pins
GPIO_PORTB_PCTL_R = GPIO_PCTL_PB7_SSI2TX | GPIO_PCTL_PB4_SSI2CLK|
GPIO_PCTL_PB5_SSI2FSS; // map alt fns to SSI2
GPIO_PORTB_DEN_R |= 0xB0; // enable digital operation on TX, CLK pins
GPIO_PORTB_PUR_R |= 0x10; // must be enabled when SPO=1
// Configure the SSI2 as a SPI master, mode 3, 16bit operation, 1 MHz bit rate
SSI2_CR1_R &= ~SSI_CR1_SSE; // turn off SSI2 to allow re-configuration
SSI2_CR1_R = 0; // select master mode
SSI2_CC_R = 0; // select system clock as the clock source
SSI2_CPSR_R = 20; // set bit rate to 1 MHz (if SR=0 in CR0)
SSI2_CR0_R = SSI_CR0_SPH | SSI_CR0_SPO | SSI_CR0_FRF_MOTO | SSI_CR0_DSS_16; // set SR=0,
mode 3 (SPH=1, SPO=1), 16-bit
SSI2_CR1_R |= SSI_CR1_SSE; // turn on SSI2
/* SSI2_SR_R= 0x3FFF;//write data to DAC
while (SSI2_SR_R & SSI_SR_BSY); //wait for transmission to stop */
// Configure Timer 1 as the time base
SYSCTL_RCGCTIMER_R |= SYSCTL_RCGCTIMER_R1; // turn-on timer
TIMER1_CTL_R &= ~TIMER_CTL_TAEN; // turn-off timer before reconfiguring
TIMER1_CFG_R = TIMER_CFG_32_BIT_TIMER; // configure as 32-bit timer (A+B)
TIMER1_TAMR_R = TIMER_TAMR_TAMR_PERIOD; // configure for periodic mode (count down)
TIMER1_TAILR_R = 0x190; // set load value to 40e6 for 100 kHz interrupt rate
TIMER1_IMR_R = TIMER_IMR_TATOIM; // turn-on interrupts
NVIC_EN0_R |= 1 << (INT_TIMER1A - 16); // turn-on interrupt 37 (TIMER1A)
SYSCTL_RCGCADC_R |= 1;
}
// Approximate busy waiting (in units of microseconds), given a 40 MHz system clock
void waitMicrosecond(uint32_t us)
{
__asm("WMS_LOOP0: MOV R1, #6"); // 1
__asm("WMS_LOOP1: SUB R1, #1"); // 6
__asm(" CBZ R1, WMS_DONE1"); // 5+1*3
__asm(" NOP"); // 5
__asm(" NOP"); // 5
__asm(" B WMS_LOOP1"); // 5*2 (speculative, so P=1)
__asm("WMS_DONE1: SUB R0, #1"); // 1
__asm(" CBZ R0, WMS_DONE0"); // 1
__asm(" NOP"); // 1
__asm(" B WMS_LOOP0"); // 1*2 (speculative, so P=1)
__asm("WMS_DONE0:"); // ---
// 40 clocks/us + error
}
// Blocking function that writes a serial character when the UART buffer is not full
void putcUart0(char c)
{
while (UART0_FR_R & UART_FR_TXFF);
UART0_DR_R = c;
}
// Blocking function that writes a string when the UART buffer is not full
void putsUart0(char* str)
{
int i;
for (i = 0; i < strlen(str); i++)
putcUart0(str[i]);
}
// Blocking function that returns with serial data once the buffer is not empty
char getcUart0()
{
while (UART0_FR_R & UART_FR_RXFE);
return UART0_DR_R & 0xFF;
}
void getsUart0()
{
char c;
int count=0;
int j;
y: c=getcUart0();
if(c==8)//backspace
{
if(count>0)
{
count--;
goto y;
}
else goto y;
}
else
{
if(c==13)//carriage return
{
if(count==0)
{
strcpy(str_input,"No command entered");
putsUart0(str_input);
putsUart0("\r\n");
goto n;
}
else
{
str_input[count]=0;
goto n;
}
}
else
{
if(c>=32)//space
{
str_input[count++]=c;
if(count>MAX_CHARS+1)
{
str_input[count]=0;
goto n;
}
else goto y;
}
else goto y;
}
}
n:;
// converting lower to upper case
for(j=0;j<str_input[j]!='\0';j++)
{
if(str_input[j]>=97 && str_input[j]<=122)
str_input[j]=str_input[j]-32;
}
}
void tokenizestring()
{
int i,j=0,k=0;
char type[20];
int position[20];
field_count=0;
for(i=0;i<20;i++)
field_type[i]=0;
//tokenizing string begins
for(i=0;str_input[i]!='\0';i++)
{
if(str_input[i]>=48 && str_input[i]<=57 || str_input[i]==45 || str_input[i]==46)
{
position[j]=i;
type[j]='n';
goto x;
}
else if(str_input[i]>=65 && str_input[i]<=90)
{
position[j]=i;
type[j]='a';
goto x;
}
else goto y;
x: if(j==0)
{
field_position[k]=position[j];
field_type[k]=type[j];
field_count++;
k++;
}
else if ((position[j]-position[j-1])!=1)
{
field_position[k]=position[j];
field_type[k]=type[j];
field_count++;
k++;
}
j++;
y:;
}
// Convert all delimiters to nulls
for(i=0;str_input[i]!='\0';i++)
{
if(!((str_input[i]>=65 && str_input[i]<=90) || (str_input[i]>=48 && str_input[i]<=57) ||
str_input[i]==45 || str_input[i]==46))
str_input[i]='\0';
}
}
bool iscommand(char *signal_type,uint8_t min_args)
{
if(strcmp(&str_input[field_position[0]],signal_type)==0 && field_count-1>=min_args)
return true;
else
return false;
}
bool getstring(uint8_t field_number)
{
int temp=0;
int i;
char temp_copy[10];
strcpy(temp_copy,&str_input[field_position[field_number]]);
if((field_number==1)||(field_number==2) || (field_number==3))
{
for (i=0;i<strlen(temp_copy);i++)
{
if(temp_copy[i]>=48 && temp_copy[i]<=57 || temp_copy[i]==45 || temp_copy[i]==46)
{
temp+=1;
}
}
if(strlen(temp_copy)==temp)
{
return true;
}
else
return false;
}
else
return false;
}
char *getnumber(int field_number)
{
char temp_copy1[10];
char temp_copy2[10];
int st=0;
int kt=0;
if(field_number==1 && (strcmp(&str_input[field_position[0]],"DC")!=0))
{
strcpy(temp_copy1,&str_input[field_position[1]]);
for (i=0;i<strlen(temp_copy1);i++)
{
if(temp_copy1[i]==45)
{
st+=1;
}
}
if(st!=0)
{
return "NEGATIVE FREQUENCY";
}
else
return &str_input[field_position[field_number]];
}
if(field_number==2 && (strcmp(&str_input[field_position[0]],"SWEEP")==0))
{
strcpy(temp_copy2,&str_input[field_position[2]]);
for (i=0;i<strlen(temp_copy2);i++)
{
if(temp_copy2[i]==45)
{
kt+=1;
}
}
if(kt!=0)
{
return "NEGATIVE FREQUENCY";
}
else
return &str_input[field_position[field_number]];
}
char *str1;
str1=&str_input[field_position[field_number]];
return str1;
}
bool sweep_linear_mode(uint8_t field_number)
{
if(field_number==3 && (strcmp(&str_input[field_position[3]],"LINEAR")==0))
{
return true;
}
else
return false;
}
bool sweep_log_mode(int field_number)
{
if(field_number==3 && (strcmp(&str_input[field_position[3]],"LOG")==0))
{
return true;
}
else
return false;
}
void dc_output()
{
out_dc=0x3000+(5-vp)*409.5;
}
void sine_output()
{
int i;
for(i=0;i<4096;i++)
{
LUT[i]=0x3000 + 2041 +(-386*((vp*(sin((2 * 3.14 * i) / 4096)))+l));
}
}
bool check_transition_n_to_a(int field_number)
{
int temp2=0;
char temp_copy2[10];
strcpy(temp_copy2,&str_input[field_position[field_number]]);
if(isdigit(temp_copy2[0]))
{
for (i=0;i<strlen(temp_copy2);i++)
{
if((temp_copy2[i]>=48 && temp_copy2[i]<=57) || temp_copy2[i]==45 || temp_copy2[i]==46)
{
temp2+=1;
}
}
if(strlen(temp_copy2)==temp2)
{
return false;
}
else
return true;
}
else
return false;
}
void out_fast()
{
// Configure AN1 as an analog input
// turn on ADC module 0 clocking
GPIO_PORTE_AFSEL_R |= 0x04; // select alternative functions for AN1 (PE2)
GPIO_PORTE_DEN_R &= ~0x04; // turn off digital operation on pin PE2
GPIO_PORTE_AMSEL_R |= 0x04; // turn on analog operation on pin PE2
ADC0_CC_R = ADC_CC_CS_SYSPLL; // select PLL as the time base (not needed, since default
value)
ADC0_ACTSS_R &= ~ADC_ACTSS_ASEN3; // disable sample sequencer 3 (SS3) for programming
ADC0_EMUX_R = ADC_EMUX_EM3_PROCESSOR; // select SS3 bit in ADCPSSI as trigger
ADC0_SSMUX3_R = 1; // set first sample to AN1
ADC0_SSCTL3_R = ADC_SSCTL3_END0; // mark first sample as the end
ADC0_ACTSS_R |= ADC_ACTSS_ASEN3;
}
void out_slow()
{
// Configure AN0 as an analog input
// turn on ADC module 0 clocking
GPIO_PORTE_AFSEL_R |= 0x08; // select alternative functions for AN0 (PE3)
GPIO_PORTE_DEN_R &= ~0x08; // turn off digital operation on pin PE3
GPIO_PORTE_AMSEL_R |= 0x08; // turn on analog operation on pin PE3
ADC0_CC_R = ADC_CC_CS_SYSPLL; // select PLL as the time base (not needed, since default
value)
ADC0_ACTSS_R &= ~ADC_ACTSS_ASEN3; // disable sample sequencer 3 (SS3) for programming
ADC0_EMUX_R = ADC_EMUX_EM3_PROCESSOR; // select SS3 bit in ADCPSSI as trigger
ADC0_SSMUX3_R = 0; // set first sample to AN0
ADC0_SSCTL3_R = ADC_SSCTL3_END0; // mark first sample as the end
ADC0_ACTSS_R |= ADC_ACTSS_ASEN3;
}
int16_t readAdc0Ss3()
{
ADC0_PSSI_R |= ADC_PSSI_SS3; // set start bit
while (ADC0_ACTSS_R & ADC_ACTSS_BUSY); // wait until SS3 is not busy
return ADC0_SSFIFO3_R; // get single result from the FIFO
}
void voltage()
{
out_slow();
raw = readAdc0Ss3();
if (load==1)
{
volt2 = (3.3*((raw+0.5) / 4096));
}
else if(load==2)
{
volt2 = (3.4*(raw+(113*4*am)))/4096;
}
else
{
volt2 = (3.3*((raw+0.5)/4096));
}
putsUart0("\r\n voltage= ");
sprintf(temp3, "%3.1f", volt2);
putsUart0(temp3);
putsUart0("\r\n");
}
void sawtooth_output()
{
int i;
for(i=0;i<4096;i++)
{
LUT[i]=0x3000+((386*vp)+2041)-((2*386*vp*i)/4096)-(386*l);
}
}
void triangular_output()
{
int i;
for(i=0;i<1024;i++)
{
z=i;
LUT[i]=0x3000-(386*l)+2041-(386*((vp*z/1024)));
}
for(i=1024;i<3072;i++)
{
z=2048-i;
LUT[i]=0x3000-(386*l)+2041-(386*((vp*z/1024)));
}
for(i=3072;i<4096;i++)
{
z=4096-i;
LUT[i]=0x3000-(386*l)+2041+(386*((vp*z/1024)));
}
}
void square_output()
{
int i;
memset(&LUT[0],0,sizeof(LUT));
for(i=0;i<2048;i++)
{
LUT[i]=0x3000+2041-(386*((vp*1)+o));
}
for(i=2048;i<4096;i++)
{
LUT[i]=0x3000+2041-(386*((vp*(-1))+o));
}
}
//-----------------------------------------------------------------------------
// Main
//-----------------------------------------------------------------------------
int main(void)
{
// Initialize hardware
initHw();
// Turn on and turn off green LED
GREEN_LED = 1;
waitMicrosecond(500000);
GREEN_LED = 0;
waitMicrosecond(500000);
//Endless loop
x:
while(1)
{
putsUart0("\n\rEnter the command\r\n");
getsUart0();
if(strcmp(str_input,"NO COMMAND ENTERED")==0)
{
goto x;
}
putsUart0("Entered command is\n");
putsUart0(str_input);
putsUart0("\r\n");
tokenizestring();
for(k=0;k<field_count;k++)// To check error notification for transition from number to alphabet
{
if(check_transition_n_to_a(k))
{
putsUart0("\r\n Invalid command->transition from n to a \r\n");
goto x;
}
}
//Code and discard
for(i=0; i<field_count; i++)
{
putsUart0(&str_input[field_position[i]]);
putsUart0("\r\n");
}
//code and discard ends
if(iscommand("DC",1))
{
if(getstring(1))
{
mode=0;
load=1;
amplitude=getnumber(1);
vp=atof(amplitude);
if((vp >= -5) && (vp <= 5))
{
dc_output();
TIMER1_CTL_R |= TIMER_CTL_TAEN;
}
else
{
putsUart0("AMPLITUDE OUT OF LIMIT");
goto x;
}
}
else
{
putsUart0("INVALID AMPLITUDE");
goto x;
}
}
else if((iscommand("SINE", 2))||(iscommand("SINE",3)))
{
if(getstring(1) && getstring(2))
{
if(field_count-1!=2)
{
if(getstring(3))
{
putsUart0("\r\n Sine generation with offset \r\n");
offset=getnumber(3);
putsUart0("\r\n Offset is \r\n");
putsUart0(offset);
l=atof(offset);
goto a;
}
else goto c;
}
else
{
l=0;
putsUart0("\r\n Sine generation without offset \r\n");
putsUart0("\r\n Offset is 0 \r\n");
goto a;
}
a: mode=1;
load=2;
amplitude=getnumber(2);
frequency=getnumber(1);
putsUart0("\r\nAmplitude is \r\n");
putsUart0(amplitude);
if(strcmp(frequency,"NEGATIVE FREQUENCY")==0)
{
putsUart0("\r\n Frequency cannot be negative value");
goto x;
}
else
{
putsUart0("\r\nFrequency is \r\n");
putsUart0(frequency);
}
vp=atof(amplitude);
st=atoi(frequency);
am=atof(amplitude);
if(vp >= -5 && vp <= 5)
{
sine_output();
delta_phase=st* pow(2,32)/100000;
TIMER1_CTL_R |= TIMER_CTL_TAEN;
}
else
{
putsUart0("AMPLITUDE OUT OF LIMIT");
goto x;
}
}
else
{
c: putsUart0("\r\nInvalid amplitude or frequency or offset");
goto x;
}
}
else if(iscommand("VOLTAGE", 0))
{
voltage();
}
else if(iscommand("SWEEP", 3))
{
if(load==2)
{
if(getstring(1)&&getstring(2))
{
frequency1=getnumber(1);
frequency2=getnumber(2);
if((strcmp(frequency1,"NEGATIVE FREQUENCY")==0)||(strcmp(frequency2,"NEGATIVE
FREQUENCY")==0))
{
putsUart0("\r\n Frequency cannot be negative\r\n");
goto x;
}
f1=atoi(frequency1);
f2=atoi(frequency2);
if(sweep_linear_mode(3))
{
step=0;
goto d;
}
else if(sweep_log_mode(3))
{
step=f2/25;
goto d;
}
else
{
putsUart0("\r\n Please enter valid sweep mode log or linear");
goto x;
}
d: if(f1<f2)
{
sweep_frequency=f1;
while(sweep_frequency<f2)
{
sweep_frequency = sweep_frequency + step;
if(sweep_frequency<f2)
{
goto d3;
}
else
{
sweep_frequency=f2;
goto d3;
}
d3: load1=3;
if(sweep_linear_mode(3))
{
step=step+1;
}
delta_phase = sweep_frequency * pow(2, 32) / 100000;
waitMicrosecond(3000000);
sprintf(string,"Sweep Frequency= %d \r\n", sweep_frequency);
putsUart0(string);
TIMER1_CTL_R |= TIMER_CTL_TAEN;
voltage();
}
}
if(f1>f2)
{
putsUart0("\r\n Sweep command cannot be performed with entered frequencies as f1>f2\r\n");
goto x;
}
}
else
{
putsUart0("\r\n Invalid frequency \r\n");
goto x;
}
}
else
putsUart0("\r\n Sweep command cannot perform without sine voltage");
}
else if(iscommand("GAIN",0))
{
if((load1==3)&&(load==2))
{
ap=f1;
while(ap<f2)
{
ap = ap + step;
if(ap<f2)
{
goto d4;
}
else
{
ap=f2;
goto d4;
}
d4: voltage();
w=(volt2/am);
yp=log10(w);
gaindb=20*yp;
putsUart0("\r\nFrequency in Hz=\r\n");
sprintf(frequencyhz,"\r\nFrequency in Hz%d \r\n",ap);
putsUart0(frequencyhz);
putsUart0("\r\nGain in db=\r\n");
sprintf(gain,"\r\nGsin in db %d\r\n",gaindb);
putsUart0(gain);
}
}
else
putsUart0("\r\n Gain command cannot be performed without sine voltage and sweep ");
}
else if((iscommand("SAWTOOTH", 2))||(iscommand("SAWTOOTH",3)))
{
if(getstring(1) && getstring(2))
{
if(field_count-1!=2)
{
if(getstring(3))
{
putsUart0("\r\n Sawtooth wave generation with offset \r\n");
offset=getnumber(3);
putsUart0("\r\n Offset is \r\n");
putsUart0(offset);
l=atof(offset);
goto p;
}
else goto q;
}
else
{
l=0;
putsUart0("\r\n Sawtooth wave generation without offset \r\n");
putsUart0("\r\n Offset is 0 \r\n");
goto p;
}
p: amplitude=getnumber(2);
frequency=getnumber(1);
putsUart0("\r\nAmplitude is \r\n");
putsUart0(amplitude);
if(strcmp(frequency,"NEGATIVE FREQUENCY")==0)
{
putsUart0("\r\n Frequency cannot be negative value \r\n");
goto x;
}
else
{
putsUart0("\r\nFrequency is \r\n");
putsUart0(frequency);
}
vp=atof(amplitude);
st=atoi(frequency);
if(vp >= -5 && vp <= 5)
{
sawtooth_output();
delta_phase=st* pow(2,32)/100000;
TIMER1_CTL_R |= TIMER_CTL_TAEN;
}
else
{
putsUart0("AMPLITUDE OUT OF LIMIT");
goto x;
}
}
else
{
q: putsUart0("\r\nInvalid amplitude or frequency or offset\r\n");
goto x;
}
}
else if((iscommand("TRIANGULAR", 2))||(iscommand("TRIANGULAR",3)))
{
if(getstring(1) && getstring(2))
{
if(field_count-1!=2)
{
if(getstring(3))
{
putsUart0("\r\n Triangular wave generation with offset \r\n");
offset=getnumber(3);
putsUart0("\r\n Offset is \r\n");
putsUart0(offset);
l=atof(offset);
goto g;
}
else goto h;
}
else
{
l=0;
putsUart0("\r\n Triangular wave generation without offset \r\n");
putsUart0("\r\n Offset is 0 \r\n");
goto g;
}
g: amplitude=getnumber(2);
frequency=getnumber(1);
putsUart0("\r\nAmplitude is \r\n");
putsUart0(amplitude);
if(strcmp(frequency,"NEGATIVE FREQUENCY")==0)
{
putsUart0("\r\n Frequency cannot be negative value \r\n");
goto x;
}
else
{
putsUart0("\r\nFrequency is \r\n");
putsUart0(frequency);
}
vp=atof(amplitude);
st=atoi(frequency);
if(vp >= -5 && vp <= 5)
{
triangular_output();
delta_phase=st* pow(2,32)/100000;
TIMER1_CTL_R |= TIMER_CTL_TAEN;
}
else
{
putsUart0("AMPLITUDE OUT OF LIMIT");
goto x;
}
}
else
{
h: putsUart0("\r\nInvalid amplitude or frequency or offset\r\n");
goto x;
}
}
else if((iscommand("SQUARE", 2))||(iscommand("SQUARE",3)))
{
if(getstring(1) && getstring(2))
{
if(field_count-1!=2)
{
if(getstring(3))
{
putsUart0("\r\n square wave generation with offset \r\n");
offset=getnumber(3);
putsUart0("\r\n Offset is \r\n");
putsUart0(offset);
o=atof(offset);
goto m1;
}
else goto n1;
}
else
{
o=0;
putsUart0("\r\n square wave generation without offset \r\n");
putsUart0("\r\n Offset is 0 \r\n");
goto m1;
}
m1: amplitude=getnumber(2);
frequency=getnumber(1);
putsUart0("\r\nAmplitude is \r\n");
putsUart0(amplitude);
if(strcmp(frequency,"NEGATIVE FREQUENCY")==0)
{
putsUart0("\r\n Frequency cannot be negative value \r\n");
goto x;
}
else
{
putsUart0("\r\nFrequency is \r\n");
putsUart0(frequency);
}
vp=atof(amplitude);
st=atoi(frequency);
if(vp >= -5 && vp <= 5)
{
square_output();
delta_phase=st* pow(2,32)/100000;
TIMER1_CTL_R |= TIMER_CTL_TAEN;
}
else
{
putsUart0("AMPLITUDE OUT OF LIMIT");
goto x;
}
}
else
{
n1: putsUart0("\r\nInvalid amplitude or frequency or offset\r\n");
goto x;
}
}
else if(iscommand("RESET", 0))
{
__asm(" .global _c_int00\n"
" b.w _c_int00");
}
else if((field_count-1<=2)&& ((strcmp(&str_input[field_position[0]],"DC")==0) ||
(strcmp(&str_input[field_position[0]],"RESET")==0) ||
(strcmp(&str_input[field_position[0]],"SINE")==0)))
{
putsUart0("\r\n Fewer arguments given for signal generation \r\n");
goto x;
}
else
{
putsUart0("\r\n Invalid commands for signal generation \r\n");//Error notification to PC for not
processing
goto x;
}
}//end of while(1)
}//end of main
